/**
 * Communication protocol between Event Managers.
 * @author Krzysztof Trzepla
 * @copyright (C) 2015 ACK CYFRONET AGH
 * @copyright This software is released under the MIT license cited in
 * 'LICENSE.txt'
 */

package one.clproto;

import "common_messages.proto";

// Generic event message
message Event {
    required uint32 counter = 1; // amount of aggregated events
    oneof event { // list of all event messages
        ReadEvent  read_event  = 2;
        WriteEvent write_event = 3;
    }
}

message ReadEvent {
    required bytes     file_uuid = 1; // UUID of file associated with an event
    required uint64    size      = 2; // amount of read bytes
    repeated FileBlock blocks    = 3; // list of read blocks
}

message WriteEvent {
    required bytes     file_uuid = 1; // UUID of file associated with an event
    optional uint64    file_size = 2; // size of file associated with an event
    required uint64    size      = 3; // amount of written bytes
    repeated FileBlock blocks    = 4; // list of written blocks
}

// Generic subscription message
message EventSubscription {
    required uint64 id = 1; // unique subscription ID
    oneof event_subscription { // list of all subscription messages
        ReadEventSubscription  read_event_subscription  = 2;
        WriteEventSubscription write_event_subscription = 3;
    }
}

message ReadEventSubscription {
    optional uint32 counter_threshold = 1; // maximal amount of aggregated
                                           // events before emission
    optional uint32 time_threshold    = 2; // maximal delay in milliseconds
                                           // between successive events emission
    optional uint32 size_threshold    = 3; // maximal amount of read bytes
                                           // before emission
}

message WriteEventSubscription {
    optional uint32 counter_threshold = 1; // maximal amount of aggregated
                                           // events before emission
    optional uint32 time_threshold    = 2; // maximal delay in milliseconds
                                           // between successive events emission
    optional uint32 size_threshold    = 3; // maximal amount of written bytes
                                           // before emission
}

message EventSubscriptionCancellation {
    required uint64 id = 1; // ID of subscription to be cancelled
}
